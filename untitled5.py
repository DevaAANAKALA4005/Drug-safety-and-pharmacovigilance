# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Qi_m57NaSHdNU55WTiJWtWM5rPE-pF_
"""

import pandas as pd
df=pd.read_csv('./drug200.csv')
df.head()

df.tail()

df.info()

df.describe()

df[['Age','BP']]

df['Age']>40

df[df['Age']>40]



df[(df['Age']>40)&(df['BP']=='HIGH')]

df.groupby('BP').count()

df.shape

df.columns

df.dtypes #column data types

df.groupby(['Age','Drug']).count()

df.groupby('Age').agg({'Na_to_K':'mean','Cholesterol':'max'})

df.isna().sum()  #find null

df=df.dropna()

df=df.fillna(369)

df=df.rename(columns={'Na_to_K':'Sodium to Potassium Ratio'})

df.head()

df=df.drop_duplicates() #to remove duplicate rows

df['Age2']=df['Age'].apply(lambda x : x * 1)

df.head()

df['Drug']

df=df.drop(columns=['Age2'])

df.head()

newdf=df[['Sex','Drug']] #new dataframe
newdf

df.iloc[5]

type(df)



type(df.iloc[5])



df.iloc[0:20]



for i in df.iterrows():
    print(i)

df['Age'].hist()  #histogram

df['Cholesterol'].hist()

df['Age'].value_counts()

df.plot.scatter(x='Sodium to Potassium Ratio',y='Age')

df[df['Cholesterol']=='HIGH']

li=[i for i in range(len(df))]   #merging columns
df['Serial No.']=li
df1=df[['Serial No.','Age']]
df2=df[['Serial No.','BP']]
df3=df1.merge(df2)
df3.head()

first_six=df.head(6)
last_seven=df.tail(7)
dfconcat=pd.concat([first_six,last_seven])
dfconcat

len(dfconcat)

df['Sodium to Potassium Ratio'].mean()

df['Sodium to Potassium Ratio'].max()

df['Sodium to Potassium Ratio'].min()

df['Serial No.']==7

df[df['Serial No.']==7]

def Agecheck(age):           #function based column creation
    if(age<35):
        return 'Young'
    else:
        return 'Old'



df['Person Existence']=df['Age'].apply(Agecheck)
df.head()

def healthcheck(row):
    if((row['Cholesterol']=='HIGH') and (row['Drug']=='drugC')):
        return 'Bad'
    else:
        return 'Good'

df['Health']=df.apply(healthcheck,axis=1)
df.head()

df.memory_usage()

df.sort_values(by='Sodium to Potassium Ratio')

def Sexcheck(sex):           #function based column creation
    if(sex=='M'):
        return 1
    else:
        return 0



df['Sex']=df['Sex'].apply(Sexcheck)
df.head()

df['Cholesterol']

df.groupby('BP').count()

def drugcheck(drug):           #function based column creation
    if(drug=='DrugY'):
        return 1
    elif drug=='drugA':
        return 2
    elif drug=='drugB':
        return 3
    elif drug=='drugC':
        return 4
    else:
        return 5





df['Drug']=df['Drug'].apply(drugcheck)
df.head()

df.info()